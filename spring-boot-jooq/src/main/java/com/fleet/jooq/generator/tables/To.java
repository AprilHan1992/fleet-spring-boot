/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.ToRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 角色
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class To extends TableImpl<ToRecord> {

    private static final long serialVersionUID = 1636775284;

    /**
     * The reference instance of <code>fleet-test.to</code>
     */
    public static final To TO = new To();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToRecord> getRecordType() {
        return ToRecord.class;
    }

    /**
     * The column <code>fleet-test.to.id</code>. 消息接收id
     */
    public final TableField<ToRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "消息接收id");

    /**
     * The column <code>fleet-test.to.msg_id</code>. 消息id
     */
    public final TableField<ToRecord, UInteger> MSG_ID = createField("msg_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "消息id");

    /**
     * The column <code>fleet-test.to.to</code>. 消息接收人
     */
    public final TableField<ToRecord, UInteger> TO_ = createField("to", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "消息接收人");

    /**
     * The column <code>fleet-test.to.read_state</code>. 消息阅读状态（0：未读，1：已读）
     */
    public final TableField<ToRecord, UInteger> READ_STATE = createField("read_state", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "消息阅读状态（0：未读，1：已读）");

    /**
     * The column <code>fleet-test.to.read_time</code>. 阅读时间
     */
    public final TableField<ToRecord, LocalDateTime> READ_TIME = createField("read_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "阅读时间");

    /**
     * The column <code>fleet-test.to.deleted</code>. 是否删除（1：是，0：否）
     */
    public final TableField<ToRecord, UInteger> DELETED = createField("deleted", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否删除（1：是，0：否）");

    /**
     * Create a <code>fleet-test.to</code> table reference
     */
    public To() {
        this(DSL.name("to"), null);
    }

    /**
     * Create an aliased <code>fleet-test.to</code> table reference
     */
    public To(String alias) {
        this(DSL.name(alias), TO);
    }

    /**
     * Create an aliased <code>fleet-test.to</code> table reference
     */
    public To(Name alias) {
        this(alias, TO);
    }

    private To(Name alias, Table<ToRecord> aliased) {
        this(alias, aliased, null);
    }

    private To(Name alias, Table<ToRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("角色"));
    }

    public <O extends Record> To(Table<O> child, ForeignKey<O, ToRecord> key) {
        super(child, key, TO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TO_PRIMARY, Indexes.TO_UNI_USER_MSG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ToRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_TO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ToRecord> getPrimaryKey() {
        return Keys.KEY_TO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ToRecord>> getKeys() {
        return Arrays.<UniqueKey<ToRecord>>asList(Keys.KEY_TO_PRIMARY, Keys.KEY_TO_UNI_USER_MSG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public To as(String alias) {
        return new To(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public To as(Name alias) {
        return new To(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public To rename(String name) {
        return new To(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public To rename(Name name) {
        return new To(name, null);
    }
}
