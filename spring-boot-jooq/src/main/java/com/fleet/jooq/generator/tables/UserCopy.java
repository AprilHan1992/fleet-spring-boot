/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.UserCopyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 用户信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCopy extends TableImpl<UserCopyRecord> {

    private static final long serialVersionUID = -1088119801;

    /**
     * The reference instance of <code>fleet-test.user_copy</code>
     */
    public static final UserCopy USER_COPY = new UserCopy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserCopyRecord> getRecordType() {
        return UserCopyRecord.class;
    }

    /**
     * The column <code>fleet-test.user_copy.id</code>. 用户id
     */
    public final TableField<UserCopyRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "用户id");

    /**
     * The column <code>fleet-test.user_copy.name</code>. 用户名
     */
    public final TableField<UserCopyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "用户名");

    /**
     * Create a <code>fleet-test.user_copy</code> table reference
     */
    public UserCopy() {
        this(DSL.name("user_copy"), null);
    }

    /**
     * Create an aliased <code>fleet-test.user_copy</code> table reference
     */
    public UserCopy(String alias) {
        this(DSL.name(alias), USER_COPY);
    }

    /**
     * Create an aliased <code>fleet-test.user_copy</code> table reference
     */
    public UserCopy(Name alias) {
        this(alias, USER_COPY);
    }

    private UserCopy(Name alias, Table<UserCopyRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserCopy(Name alias, Table<UserCopyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户信息"));
    }

    public <O extends Record> UserCopy(Table<O> child, ForeignKey<O, UserCopyRecord> key) {
        super(child, key, USER_COPY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_COPY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserCopyRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_USER_COPY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserCopyRecord> getPrimaryKey() {
        return Keys.KEY_USER_COPY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserCopyRecord>> getKeys() {
        return Arrays.<UniqueKey<UserCopyRecord>>asList(Keys.KEY_USER_COPY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserCopy as(String alias) {
        return new UserCopy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserCopy as(Name alias) {
        return new UserCopy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCopy rename(String name) {
        return new UserCopy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCopy rename(Name name) {
        return new UserCopy(name, null);
    }
}
