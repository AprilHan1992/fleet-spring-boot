/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.ValueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Value extends TableImpl<ValueRecord> {

    private static final long serialVersionUID = 266187184;

    /**
     * The reference instance of <code>fleet-test.value</code>
     */
    public static final Value VALUE = new Value();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ValueRecord> getRecordType() {
        return ValueRecord.class;
    }

    /**
     * The column <code>fleet-test.value.id</code>. 字典值id
     */
    public final TableField<ValueRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "字典值id");

    /**
     * The column <code>fleet-test.value.dict_id</code>. 字典id
     */
    public final TableField<ValueRecord, UInteger> DICT_ID = createField("dict_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "字典id");

    /**
     * The column <code>fleet-test.value.code</code>. 字典标签
     */
    public final TableField<ValueRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "字典标签");

    /**
     * The column <code>fleet-test.value.value</code>. 字典值
     */
    public final TableField<ValueRecord, String> VALUE_ = createField("value", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "字典值");

    /**
     * The column <code>fleet-test.value.remark</code>. 字典值描述
     */
    public final TableField<ValueRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(128), this, "字典值描述");

    /**
     * The column <code>fleet-test.value.sort</code>. 排序（数字越大，越排前）
     */
    public final TableField<ValueRecord, UInteger> SORT = createField("sort", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "排序（数字越大，越排前）");

    /**
     * The column <code>fleet-test.value.is_default</code>. 是否是默认值（1：是，0：否）
     */
    public final TableField<ValueRecord, UInteger> IS_DEFAULT = createField("is_default", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否是默认值（1：是，0：否）");

    /**
     * The column <code>fleet-test.value.deleted</code>. 是否删除（1：是，0：否）
     */
    public final TableField<ValueRecord, UInteger> DELETED = createField("deleted", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否删除（1：是，0：否）");

    /**
     * Create a <code>fleet-test.value</code> table reference
     */
    public Value() {
        this(DSL.name("value"), null);
    }

    /**
     * Create an aliased <code>fleet-test.value</code> table reference
     */
    public Value(String alias) {
        this(DSL.name(alias), VALUE);
    }

    /**
     * Create an aliased <code>fleet-test.value</code> table reference
     */
    public Value(Name alias) {
        this(alias, VALUE);
    }

    private Value(Name alias, Table<ValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Value(Name alias, Table<ValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Value(Table<O> child, ForeignKey<O, ValueRecord> key) {
        super(child, key, VALUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VALUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ValueRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ValueRecord> getPrimaryKey() {
        return Keys.KEY_VALUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ValueRecord>> getKeys() {
        return Arrays.<UniqueKey<ValueRecord>>asList(Keys.KEY_VALUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Value as(String alias) {
        return new Value(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Value as(Name alias) {
        return new Value(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Value rename(String name) {
        return new Value(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Value rename(Name name) {
        return new Value(name, null);
    }
}
