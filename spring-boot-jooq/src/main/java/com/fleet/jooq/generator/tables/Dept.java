/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.DeptRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 部门管理
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dept extends TableImpl<DeptRecord> {

    private static final long serialVersionUID = -1587982105;

    /**
     * The reference instance of <code>fleet-test.dept</code>
     */
    public static final Dept DEPT = new Dept();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeptRecord> getRecordType() {
        return DeptRecord.class;
    }

    /**
     * The column <code>fleet-test.dept.id</code>. 部门id
     */
    public final TableField<DeptRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "部门id");

    /**
     * The column <code>fleet-test.dept.name</code>. 部门名称
     */
    public final TableField<DeptRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "部门名称");

    /**
     * The column <code>fleet-test.dept.state</code>. 部门状态（1：正常， 0：停用）
     */
    public final TableField<DeptRecord, UInteger> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "部门状态（1：正常， 0：停用）");

    /**
     * The column <code>fleet-test.dept.sort</code>. 排序（数字越大，越排前）
     */
    public final TableField<DeptRecord, UInteger> SORT = createField("sort", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "排序（数字越大，越排前）");

    /**
     * The column <code>fleet-test.dept.creator_id</code>. 创建人
     */
    public final TableField<DeptRecord, UInteger> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "创建人");

    /**
     * The column <code>fleet-test.dept.create_time</code>. 创建时间
     */
    public final TableField<DeptRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>fleet-test.dept.editor_id</code>. 修改人
     */
    public final TableField<DeptRecord, UInteger> EDITOR_ID = createField("editor_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "修改人");

    /**
     * The column <code>fleet-test.dept.edit_time</code>. 修改时间
     */
    public final TableField<DeptRecord, LocalDateTime> EDIT_TIME = createField("edit_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "修改时间");

    /**
     * The column <code>fleet-test.dept.upper_id</code>. 上一级部门id
     */
    public final TableField<DeptRecord, UInteger> UPPER_ID = createField("upper_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "上一级部门id");

    /**
     * The column <code>fleet-test.dept.deleted</code>. 是否删除（1：是，0：否）
     */
    public final TableField<DeptRecord, UInteger> DELETED = createField("deleted", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否删除（1：是，0：否）");

    /**
     * Create a <code>fleet-test.dept</code> table reference
     */
    public Dept() {
        this(DSL.name("dept"), null);
    }

    /**
     * Create an aliased <code>fleet-test.dept</code> table reference
     */
    public Dept(String alias) {
        this(DSL.name(alias), DEPT);
    }

    /**
     * Create an aliased <code>fleet-test.dept</code> table reference
     */
    public Dept(Name alias) {
        this(alias, DEPT);
    }

    private Dept(Name alias, Table<DeptRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dept(Name alias, Table<DeptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("部门管理"));
    }

    public <O extends Record> Dept(Table<O> child, ForeignKey<O, DeptRecord> key) {
        super(child, key, DEPT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEPT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DeptRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_DEPT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DeptRecord> getPrimaryKey() {
        return Keys.KEY_DEPT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DeptRecord>> getKeys() {
        return Arrays.<UniqueKey<DeptRecord>>asList(Keys.KEY_DEPT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dept as(String alias) {
        return new Dept(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dept as(Name alias) {
        return new Dept(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dept rename(String name) {
        return new Dept(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dept rename(Name name) {
        return new Dept(name, null);
    }
}
