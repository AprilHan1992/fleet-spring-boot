/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.MailGroupRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 邮箱组信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MailGroup extends TableImpl<MailGroupRecord> {

    private static final long serialVersionUID = 1266120344;

    /**
     * The reference instance of <code>fleet-test.mail_group</code>
     */
    public static final MailGroup MAIL_GROUP = new MailGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailGroupRecord> getRecordType() {
        return MailGroupRecord.class;
    }

    /**
     * The column <code>fleet-test.mail_group.id</code>. 邮箱组id
     */
    public final TableField<MailGroupRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "邮箱组id");

    /**
     * The column <code>fleet-test.mail_group.name</code>. 邮箱组名称
     */
    public final TableField<MailGroupRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(126).nullable(false), this, "邮箱组名称");

    /**
     * The column <code>fleet-test.mail_group.tos</code>. 邮箱（多个邮箱之间用","隔开）
     */
    public final TableField<MailGroupRecord, String> TOS = createField("tos", org.jooq.impl.SQLDataType.CLOB, this, "邮箱（多个邮箱之间用\",\"隔开）");

    /**
     * The column <code>fleet-test.mail_group.deleted</code>. 是否删除（1：是，0：否）
     */
    public final TableField<MailGroupRecord, UInteger> DELETED = createField("deleted", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否删除（1：是，0：否）");

    /**
     * Create a <code>fleet-test.mail_group</code> table reference
     */
    public MailGroup() {
        this(DSL.name("mail_group"), null);
    }

    /**
     * Create an aliased <code>fleet-test.mail_group</code> table reference
     */
    public MailGroup(String alias) {
        this(DSL.name(alias), MAIL_GROUP);
    }

    /**
     * Create an aliased <code>fleet-test.mail_group</code> table reference
     */
    public MailGroup(Name alias) {
        this(alias, MAIL_GROUP);
    }

    private MailGroup(Name alias, Table<MailGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private MailGroup(Name alias, Table<MailGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("邮箱组信息"));
    }

    public <O extends Record> MailGroup(Table<O> child, ForeignKey<O, MailGroupRecord> key) {
        super(child, key, MAIL_GROUP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAIL_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MailGroupRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MAIL_GROUP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MailGroupRecord> getPrimaryKey() {
        return Keys.KEY_MAIL_GROUP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MailGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<MailGroupRecord>>asList(Keys.KEY_MAIL_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MailGroup as(String alias) {
        return new MailGroup(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MailGroup as(Name alias) {
        return new MailGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MailGroup rename(String name) {
        return new MailGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MailGroup rename(Name name) {
        return new MailGroup(name, null);
    }
}
