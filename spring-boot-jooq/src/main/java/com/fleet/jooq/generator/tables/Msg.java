/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.MsgRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 角色
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Msg extends TableImpl<MsgRecord> {

    private static final long serialVersionUID = 1095997185;

    /**
     * The reference instance of <code>fleet-test.msg</code>
     */
    public static final Msg MSG = new Msg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MsgRecord> getRecordType() {
        return MsgRecord.class;
    }

    /**
     * The column <code>fleet-test.msg.id</code>. 消息id
     */
    public final TableField<MsgRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "消息id");

    /**
     * The column <code>fleet-test.msg.title</code>. 消息标题
     */
    public final TableField<MsgRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "消息标题");

    /**
     * The column <code>fleet-test.msg.excerpt</code>. 消息摘要
     */
    public final TableField<MsgRecord, String> EXCERPT = createField("excerpt", org.jooq.impl.SQLDataType.VARCHAR(255), this, "消息摘要");

    /**
     * The column <code>fleet-test.msg.url</code>. 网址
     */
    public final TableField<MsgRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(255), this, "网址");

    /**
     * The column <code>fleet-test.msg.state</code>. 消息状态（0：未发布，1：已发布）
     */
    public final TableField<MsgRecord, UInteger> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "消息状态（0：未发布，1：已发布）");

    /**
     * The column <code>fleet-test.msg.creator_id</code>. 创建人
     */
    public final TableField<MsgRecord, UInteger> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "创建人");

    /**
     * The column <code>fleet-test.msg.create_time</code>. 创建时间
     */
    public final TableField<MsgRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>fleet-test.msg.deleted</code>. 是否删除（1：是，0：否）
     */
    public final TableField<MsgRecord, UInteger> DELETED = createField("deleted", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否删除（1：是，0：否）");

    /**
     * Create a <code>fleet-test.msg</code> table reference
     */
    public Msg() {
        this(DSL.name("msg"), null);
    }

    /**
     * Create an aliased <code>fleet-test.msg</code> table reference
     */
    public Msg(String alias) {
        this(DSL.name(alias), MSG);
    }

    /**
     * Create an aliased <code>fleet-test.msg</code> table reference
     */
    public Msg(Name alias) {
        this(alias, MSG);
    }

    private Msg(Name alias, Table<MsgRecord> aliased) {
        this(alias, aliased, null);
    }

    private Msg(Name alias, Table<MsgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("角色"));
    }

    public <O extends Record> Msg(Table<O> child, ForeignKey<O, MsgRecord> key) {
        super(child, key, MSG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MSG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MsgRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MSG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MsgRecord> getPrimaryKey() {
        return Keys.KEY_MSG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MsgRecord>> getKeys() {
        return Arrays.<UniqueKey<MsgRecord>>asList(Keys.KEY_MSG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Msg as(String alias) {
        return new Msg(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Msg as(Name alias) {
        return new Msg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Msg rename(String name) {
        return new Msg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Msg rename(Name name) {
        return new Msg(name, null);
    }
}
