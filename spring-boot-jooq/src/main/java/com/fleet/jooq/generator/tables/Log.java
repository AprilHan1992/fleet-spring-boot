/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.LogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 系统日志
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Log extends TableImpl<LogRecord> {

    private static final long serialVersionUID = -711608225;

    /**
     * The reference instance of <code>fleet-test.log</code>
     */
    public static final Log LOG = new Log();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogRecord> getRecordType() {
        return LogRecord.class;
    }

    /**
     * The column <code>fleet-test.log.id</code>. 日志id
     */
    public final TableField<LogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "日志id");

    /**
     * The column <code>fleet-test.log.user_id</code>. 操作用户id
     */
    public final TableField<LogRecord, UInteger> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "操作用户id");

    /**
     * The column <code>fleet-test.log.name</code>. 操作用户名
     */
    public final TableField<LogRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "操作用户名");

    /**
     * The column <code>fleet-test.log.type</code>. 日志类型（1：用户登录，2：用户操作，3：用户登出）
     */
    public final TableField<LogRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER, this, "日志类型（1：用户登录，2：用户操作，3：用户登出）");

    /**
     * The column <code>fleet-test.log.log</code>. log信息
     */
    public final TableField<LogRecord, String> LOG_ = createField("log", org.jooq.impl.SQLDataType.VARCHAR(255), this, "log信息");

    /**
     * The column <code>fleet-test.log.url</code>. 网址
     */
    public final TableField<LogRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(255), this, "网址");

    /**
     * The column <code>fleet-test.log.http_method</code>. 请求方式
     */
    public final TableField<LogRecord, String> HTTP_METHOD = createField("http_method", org.jooq.impl.SQLDataType.VARCHAR(255), this, "请求方式");

    /**
     * The column <code>fleet-test.log.method</code>. 方法名
     */
    public final TableField<LogRecord, String> METHOD = createField("method", org.jooq.impl.SQLDataType.VARCHAR(255), this, "方法名");

    /**
     * The column <code>fleet-test.log.params</code>. 参数
     */
    public final TableField<LogRecord, String> PARAMS = createField("params", org.jooq.impl.SQLDataType.CLOB, this, "参数");

    /**
     * The column <code>fleet-test.log.ip</code>. IP地址
     */
    public final TableField<LogRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(255), this, "IP地址");

    /**
     * The column <code>fleet-test.log.agent</code>. User-Agent
     */
    public final TableField<LogRecord, String> AGENT = createField("agent", org.jooq.impl.SQLDataType.VARCHAR(255), this, "User-Agent");

    /**
     * The column <code>fleet-test.log.os</code>. 系统
     */
    public final TableField<LogRecord, String> OS = createField("os", org.jooq.impl.SQLDataType.VARCHAR(255), this, "系统");

    /**
     * The column <code>fleet-test.log.browser</code>. 浏览器
     */
    public final TableField<LogRecord, String> BROWSER = createField("browser", org.jooq.impl.SQLDataType.VARCHAR(255), this, "浏览器");

    /**
     * The column <code>fleet-test.log.state</code>. 任务状态 （1：成功，0：失败）
     */
    public final TableField<LogRecord, UInteger> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "任务状态 （1：成功，0：失败）");

    /**
     * The column <code>fleet-test.log.error</code>. 错误信息
     */
    public final TableField<LogRecord, String> ERROR = createField("error", org.jooq.impl.SQLDataType.CLOB, this, "错误信息");

    /**
     * The column <code>fleet-test.log.millis</code>. 执行时间（单位：毫秒）
     */
    public final TableField<LogRecord, Long> MILLIS = createField("millis", org.jooq.impl.SQLDataType.BIGINT, this, "执行时间（单位：毫秒）");

    /**
     * The column <code>fleet-test.log.create_time</code>. 创建时间
     */
    public final TableField<LogRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "创建时间");

    /**
     * Create a <code>fleet-test.log</code> table reference
     */
    public Log() {
        this(DSL.name("log"), null);
    }

    /**
     * Create an aliased <code>fleet-test.log</code> table reference
     */
    public Log(String alias) {
        this(DSL.name(alias), LOG);
    }

    /**
     * Create an aliased <code>fleet-test.log</code> table reference
     */
    public Log(Name alias) {
        this(alias, LOG);
    }

    private Log(Name alias, Table<LogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Log(Name alias, Table<LogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("系统日志"));
    }

    public <O extends Record> Log(Table<O> child, ForeignKey<O, LogRecord> key) {
        super(child, key, LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogRecord, Long> getIdentity() {
        return Keys.IDENTITY_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogRecord> getPrimaryKey() {
        return Keys.KEY_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogRecord>> getKeys() {
        return Arrays.<UniqueKey<LogRecord>>asList(Keys.KEY_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Log as(String alias) {
        return new Log(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Log as(Name alias) {
        return new Log(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(String name) {
        return new Log(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(Name name) {
        return new Log(name, null);
    }
}
