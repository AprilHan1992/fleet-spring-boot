/*
 * This file is generated by jOOQ.
 */
package com.fleet.jooq.generator.tables;


import com.fleet.jooq.generator.FleetTest;
import com.fleet.jooq.generator.Indexes;
import com.fleet.jooq.generator.Keys;
import com.fleet.jooq.generator.tables.records.MenuRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 菜单
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Menu extends TableImpl<MenuRecord> {

    private static final long serialVersionUID = -2137353899;

    /**
     * The reference instance of <code>fleet-test.menu</code>
     */
    public static final Menu MENU = new Menu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuRecord> getRecordType() {
        return MenuRecord.class;
    }

    /**
     * The column <code>fleet-test.menu.menu_id</code>. 菜单id
     */
    public final TableField<MenuRecord, UInteger> MENU_ID = createField("menu_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "菜单id");

    /**
     * The column <code>fleet-test.menu.menu_type</code>. 菜单类型（1：目录，2：菜单，3：按钮）
     */
    public final TableField<MenuRecord, UInteger> MENU_TYPE = createField("menu_type", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "菜单类型（1：目录，2：菜单，3：按钮）");

    /**
     * The column <code>fleet-test.menu.menu_name</code>. 菜单名称
     */
    public final TableField<MenuRecord, String> MENU_NAME = createField("menu_name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "菜单名称");

    /**
     * The column <code>fleet-test.menu.menu_icon</code>. 菜单图标
     */
    public final TableField<MenuRecord, String> MENU_ICON = createField("menu_icon", org.jooq.impl.SQLDataType.VARCHAR(255), this, "菜单图标");

    /**
     * The column <code>fleet-test.menu.menu_desc</code>. 菜单描述
     */
    public final TableField<MenuRecord, String> MENU_DESC = createField("menu_desc", org.jooq.impl.SQLDataType.VARCHAR(255), this, "菜单描述");

    /**
     * The column <code>fleet-test.menu.href</code>. 资源路径
     */
    public final TableField<MenuRecord, String> HREF = createField("href", org.jooq.impl.SQLDataType.VARCHAR(255), this, "资源路径");

    /**
     * The column <code>fleet-test.menu.target</code>. 打开方式（_self：相同框架，_top：当前页，_blank：新建窗口，_parent：父窗口）
     */
    public final TableField<MenuRecord, String> TARGET = createField("target", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false).defaultValue(org.jooq.impl.DSL.inline("_self", org.jooq.impl.SQLDataType.VARCHAR)), this, "打开方式（_self：相同框架，_top：当前页，_blank：新建窗口，_parent：父窗口）");

    /**
     * The column <code>fleet-test.menu.permit</code>. 授权标识（多个之间用","隔开）
     */
    public final TableField<MenuRecord, String> PERMIT = createField("permit", org.jooq.impl.SQLDataType.VARCHAR(255), this, "授权标识（多个之间用\",\"隔开）");

    /**
     * The column <code>fleet-test.menu.sort_value</code>. 排序（数字越大，越排前）
     */
    public final TableField<MenuRecord, UInteger> SORT_VALUE = createField("sort_value", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "排序（数字越大，越排前）");

    /**
     * The column <code>fleet-test.menu.is_public</code>. 是否公开菜单（1：是，无需分配就可以访问，0：否）
     */
    public final TableField<MenuRecord, UInteger> IS_PUBLIC = createField("is_public", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否公开菜单（1：是，无需分配就可以访问，0：否）");

    /**
     * The column <code>fleet-test.menu.is_enable</code>. 是否启用（1：是，0：否）
     */
    public final TableField<MenuRecord, UInteger> IS_ENABLE = createField("is_enable", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否启用（1：是，0：否）");

    /**
     * The column <code>fleet-test.menu.create_time</code>. 创建时间
     */
    public final TableField<MenuRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>fleet-test.menu.edit_time</code>. 更新时间
     */
    public final TableField<MenuRecord, LocalDateTime> EDIT_TIME = createField("edit_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "更新时间");

    /**
     * The column <code>fleet-test.menu.upper_menu_id</code>. 上一级菜单id
     */
    public final TableField<MenuRecord, UInteger> UPPER_MENU_ID = createField("upper_menu_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "上一级菜单id");

    /**
     * The column <code>fleet-test.menu.is_deleted</code>. 是否删除（1：是，0：否）
     */
    public final TableField<MenuRecord, UInteger> IS_DELETED = createField("is_deleted", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "是否删除（1：是，0：否）");

    /**
     * Create a <code>fleet-test.menu</code> table reference
     */
    public Menu() {
        this(DSL.name("menu"), null);
    }

    /**
     * Create an aliased <code>fleet-test.menu</code> table reference
     */
    public Menu(String alias) {
        this(DSL.name(alias), MENU);
    }

    /**
     * Create an aliased <code>fleet-test.menu</code> table reference
     */
    public Menu(Name alias) {
        this(alias, MENU);
    }

    private Menu(Name alias, Table<MenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private Menu(Name alias, Table<MenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("菜单"));
    }

    public <O extends Record> Menu(Table<O> child, ForeignKey<O, MenuRecord> key) {
        super(child, key, MENU);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FleetTest.FLEET_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MENU_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MenuRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MENU;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MenuRecord> getPrimaryKey() {
        return Keys.KEY_MENU_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MenuRecord>> getKeys() {
        return Arrays.<UniqueKey<MenuRecord>>asList(Keys.KEY_MENU_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Menu as(String alias) {
        return new Menu(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Menu as(Name alias) {
        return new Menu(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(String name) {
        return new Menu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(Name name) {
        return new Menu(name, null);
    }
}
